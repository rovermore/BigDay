package com.smallworldfs.moneytransferapp.domain.migrated.status.model

import com.smallworldfs.moneytransferapp.utils.STRING_EMPTY

data class TransactionDTO(
    val id: String = STRING_EMPTY,
    val mtn: String = STRING_EMPTY,
    val status: String = STRING_EMPTY,
    val paid: String = STRING_EMPTY,
    val clientId: String = STRING_EMPTY,
    val senderCountry: String = STRING_EMPTY,
    val originalId: String = STRING_EMPTY,
    val clientRelationId: String = STRING_EMPTY,
    val originalRelationId: String = STRING_EMPTY,
    val totalSale: String = STRING_EMPTY,
    val promotionCode: String = STRING_EMPTY,
    val promotionAmount: String = STRING_EMPTY,
    val changeDate: String = STRING_EMPTY,
    val createdAt: String = STRING_EMPTY,
    val updatedAt: String = STRING_EMPTY,
    val pspReference: String = STRING_EMPTY,
    val mtnProgram: String = STRING_EMPTY,
    val ip: String = STRING_EMPTY,
    val confirmOnline: String = STRING_EMPTY,
    val acknowledge: String = STRING_EMPTY,
    val ioConfCode: String = STRING_EMPTY,
    val ioInstName: String = STRING_EMPTY,
    val ioText: String = STRING_EMPTY,
    val oneSweepSend: String = STRING_EMPTY,
    val clientName: String = STRING_EMPTY,
    val timestamp: String = STRING_EMPTY,
    val extraCost: String = STRING_EMPTY,
    val ec: String = STRING_EMPTY,
    val issuer: String = STRING_EMPTY,
    val deliveryMethod: String = STRING_EMPTY,
    val deliveryType: String = STRING_EMPTY,
    val bankTitular: String = STRING_EMPTY,
    val bankName: String = STRING_EMPTY,
    val bankName2: String = STRING_EMPTY,
    val fixedFee: String = STRING_EMPTY,
    val variableFee: String = STRING_EMPTY,
    val sendingCurrency: String = STRING_EMPTY,
    val requestDate: String = STRING_EMPTY,
    val cancelTime: String = STRING_EMPTY,
    val promotionName: String = STRING_EMPTY,
    val statusMsg: String = STRING_EMPTY,
    var translatedDeliveryMethod: String = STRING_EMPTY,
    val beneficiaryId: String = STRING_EMPTY,
    val rate: Double = 0.0,
    val taxAmount: String = STRING_EMPTY,
    val taxCode: String = STRING_EMPTY,
    val offline: Boolean = false,
    val boleto: Boolean = false,
    val cancellable: Boolean = false,
    val isChallenge: Boolean = false,
    val deliveryInformation: List<TransactionItemValueDTO> = listOf(),
    val transactionInformation: List<TransactionItemValueDTO> = listOf(),
    val transactionTaxes: TransactionItemValueDTO = TransactionItemValueDTO(STRING_EMPTY, STRING_EMPTY),
    val paymentInfo: PaymentInfoDTO = PaymentInfoDTO(),
    val beneficiaryInfo: BeneficiaryInfoDTO = BeneficiaryInfoDTO(),
)

data class BeneficiaryInfoDTO(
    val beneficiaryFirstName: String = STRING_EMPTY,
    val beneficiaryFirstLastName: String = STRING_EMPTY,
    val beneficiaryCountry: String = STRING_EMPTY,
    val beneficiaryCity: String = STRING_EMPTY,
    val beneficiaryBankName: String = STRING_EMPTY,
    val beneficiaryAccountNumber: String = STRING_EMPTY,
    val beneficiaryAddress: String = STRING_EMPTY,
    val beneficiaryZip: String = STRING_EMPTY,
    val beneficiaryMobilePhoneNumber: String = STRING_EMPTY,
)

data class PaymentInfoDTO(
    val paidDate: String = STRING_EMPTY,
    val payerName: String = STRING_EMPTY,
    val paymentType: String = STRING_EMPTY,
    var paymentMethod: String = STRING_EMPTY,
    val payoutPrincipal: String = STRING_EMPTY,
    val routingNumber: String = STRING_EMPTY,
    val paymentUrl: String = STRING_EMPTY,
    val payoutCountry: String = STRING_EMPTY,
    val payoutCurrency: String = STRING_EMPTY,
    val accountNumber: String = STRING_EMPTY,
    val accountType: String = STRING_EMPTY,
    val iban: String = STRING_EMPTY,
    val bic: String = STRING_EMPTY,
    val bankAccountType: String = STRING_EMPTY,
    val bankNumber: String = STRING_EMPTY,
    val bankIban: String = STRING_EMPTY,
    val translatedPaymentMethod: String = STRING_EMPTY,
)
data class TransactionItemValueDTO(var title: String, val value: String)
