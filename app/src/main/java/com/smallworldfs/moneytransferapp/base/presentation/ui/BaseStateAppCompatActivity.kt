package com.smallworldfs.moneytransferapp.base.presentation.ui

import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import androidx.activity.result.ActivityResultLauncher
import androidx.viewbinding.ViewBinding
import com.smallworldfs.moneytransferapp.base.presentation.navigator.BaseNavigator
import com.smallworldfs.moneytransferapp.base.presentation.viewmodel.BaseExtraData
import com.smallworldfs.moneytransferapp.base.presentation.viewmodel.BaseState
import com.smallworldfs.moneytransferapp.base.presentation.viewmodel.BaseStateViewModel
import java.io.Serializable

abstract class BaseStateAppCompatActivity<S : Serializable, VM : BaseStateViewModel<S, N>, N : BaseNavigator, B : ViewBinding>(viewModelClass: Class<VM>) : BaseAppCompatActivity<VM, N, B>(viewModelClass) {

    var activityResultsLaunchers: HashMap<Int, ActivityResultLauncher<Intent>> = hashMapOf()

    abstract override val bindingInflater: (LayoutInflater) -> B

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Set the input state if params came from the last activity
        val inputState: S? = setInputState(intent)

        // Here must go the view set up
        onViewModelInitialized(viewModel)

        // Every time that the view model is started from providers call start method
        viewModel.onStart(inputState?.let { BaseState.Normal(it) })

        // Check if the state has changed
        viewModel.observableState.observe(
            this,
        ) {
            onDataUpdated(it)
        }

        navigator.registerDynamicCodes()
    }

    private fun onDataUpdated(state: BaseState<S>) {
        onStateNormal(state.data)
        if (state is BaseState.Alternative) {
            onStateAlternative(state.dataAlternative)
        } else if (state is BaseState.Error) {
            onStateError(state.dataError)
        }
    }

    /**
     * Called when come params from other activity
     */
    abstract fun setInputState(intent: Intent?): S?

    /**
     * Called once the view model have been provided. Here must go the view set up
     * @param viewModel of the view
     */
    abstract fun onViewModelInitialized(viewModel: VM)

    /**
     * Called when view model trigger an update view event
     * @param data with the state of the view
     */
    abstract fun onStateNormal(data: S)

    /**
     * Called when view model trigger a updateAlternativeState event
     * @param data with information about updateAlternativeState
     */
    abstract fun onStateAlternative(data: BaseExtraData)

    /**
     * Called when view model trigger an error event
     * @param error generated by view model
     */
    abstract fun onStateError(error: Throwable)

    /**
     * Called instead of startActivityForResult and onActivityResult following the new API https://developer.android.com/training/basics/intents/result
     */
    open fun whenActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {}

    /**
     * Override functions
     */
    override fun configureView() {}
    override fun configureViewModel() {}
    override fun extractIntentData() {}
    override fun initActivity() {}
}
